1 PASSO - INSTALAR O VITE
Digitar no terminal: npm create vite@latest .
O espaço e ponto e para inidicar a criação do vite justamente na pasta em questão
React
JavaScript

Digitar no terminal:
npm i
É a mesma coisa de npm install, é abreviação, mas e para inidicar a criação dos pacotes (bibliotecas ou módulos) do node na pasta em questão, vai criar o arquivo node_modules
Toda vez que digitar npm run dev, vai rodar o vite, é só olhar na pasta package.json em scripts
Quando digitar npm run build, vai rodar o vite build, é só olhar na pasta package.json em scripts

Digitar no terminal: npm run dev

Excluir a pasta public
Na pasta .gitignore deixar somente = node_modules
Na pasta assets
Excluir App.css
No arquivo App.jsx deixar assim:

function App() {
  return <></>;
}
export default App;

No arquivo index.css, ecluir todo conteúdo
No arquivo main.jsx, não precisa alterar
No arquivo gitignore, deixar somente node_modules
Excluir o arquivo README.md

2 PASSO - RAFCE
Instalar a extensão rafce = react arrow function components export
Pesquisar: ES7+ React/Redux/React-Native snippets, instale a extensão de dsznajder

3 PASSO - INSTALAR CÓDIGO DO FONT AWESOME React
Ir no site, clicar em docs => view the docs => Integrations => React => Set Up with React

Rolar para baixo até Add SVG Core e pegar o código e rodar no terminal
npm i --save @fortawesome/fontawesome-svg-core

Rolar mais para baixo até Add Icons Packages e pegar o código em Free SVG Icon Package e rodar no terminal tudo de uma vez só
npm i --save @fortawesome/free-solid-svg-icons
npm i --save @fortawesome/free-regular-svg-icons
npm i --save @fortawesome/free-brands-svg-icons

Rolar mais para baixo até Add React Component e pegar o código e rodar no terminal
npm i --save @fortawesome/react-fontawesome@latest

Colocar no arquivo onde for utilizar o ícone
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

E para instalar o ícnone precisa importar - React / Individual import
<FontAwesomeIcon icon={faCirclePlay} />


4 PASSO - SUBIR PROJETO PARA O GITHUB
Antes, no arquivo .gitignore, deve ficar assim:
node_modules
.env

Abrir o github:
Ir em new
Colocar o nome do repositório, ex: ViveiroLimeiraGit
Deixar em público
Clicar em criar repositório

Agora é ir para o VS Code 
Abrir na pasta global
Digite no terminal:
git init, vai deixar os arquivos U
git add .
git commit -m "Fazendo o 1 commit"
Em or push an existing repository from the comnad line
Copiar todos os códigos e rodar no terminal:
git remote add origin https://github.com/dvs78/ViveiroLimeiraReact.git
git branch -M main
git push -u origin main


5 PASSO - INSTALAR PACOTE PARA RE-RENDERIZAR PÁGINAS
Abrir na pasta global
Digitar no terminal:
npm i react-router-dom

Importar dentro do arquivo App.jsx
import { BrowserRouter, Routes, Route } from "react-router-dom";

O que é BrowserRouter: vai gerenciar as rotas. Browser = navegador, Router = roteador

Alterar o código

import React from "react";
import Header from "./components/Header";
import Main from "./components/Main";
import { BrowserRouter, Routes, Route } from "react-router-dom";

const App = () => {
  return (
    <>
      <BrowserRouter>
        <Header />
        <Main />
      </BrowserRouter>
    </>
  );
};

export default App;

E dentro da pasta src criar a pasta pages


5 PASSO - IMPORTAR LINK
Usar os Link no lugar das âncoras, é utilizado para caminhar dentro do próprio documento
import { Link } from "react-router-dom";
Substitui a <a por Link e href por to


6 PASSO - CONSTRUIR A API - APPLICATION PROGRAMING INTERFACE (Interface de programação de aplicações)
Sistema utilizado para comunicação de 2 entidades, ou seja, 2 computadores
Criar uma pasta fron-end e colar todos os arquivos criados até agora
Criar a pasta back-end para montar a API
Ir para back-end no terminal
Criar um package.json, digitar o código abaixo. O -y é só para trazer todas as configurações padrão desse projeto aquivos
npm init -y

Colocar no package.json, depois de description "type": "module",

Instalar express e pgadmin
npm install express pg
express: framework para criar a API HTTP.

pg: cliente PostgreSQL para Node.js.

Criar a pasta api e dentro dela o arquivo server.js


7 PASSO - CONTINUAÇÃO DA API
NO arquivo server.js, deixar assim;

// API significa Application Programing interface
// POST, GET, PUT, DELETE
// CRUD - CREATE, READ, UPDATE e DELETE
// Endpoint

import express from "express";

const app = express();

app.get("/", async (request, response) => {
  response.send("Por enquanto só estou com construindo endpiont '/clientes'");
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Servidor está escutando na porta ${PORT}`);
});

mata o servidor e executa o arquivo server.js
node .\api\server.js

Mas sempre que alterar o código, tem que matar o servidor e reiniciar novamente
Para não ter que fazer isso tem que colocar watch
node --watch .\api\server.js

Alguns treinos na web
// app.get("/", async (request, response) => {
//   response.send("Por enquanto só estou com construindo endpoint '/clientes'");
// });

// app.get("/clientes", async (request, response) => {
//   response.send("Quero entregar meu json no endpoint '/clientes'");
// });





9 PASSO - CRIAR A PASTA API NO FRONT-ENDPOINT
Criar a pasta api no front-end e dentrodela apiFront.js
Instalar o axios no front-end, rodar
npm i axios


10 PASSO - CORS
Middleware, para resolver o problema do front e back que estão em portas diferentes,
cors: middleware que permite requisições entre front-end e back-end.
Ir para pasta back-end
Rodar no arquivo server.js
npm i cors
import cors from "cors";

app.use(cors());
app.use(express.json());




6 PASSO - CONEXÃO COM BANCO DE DADOS
Entrar no mongoDB para pegar o banco de dados de música, pode logar com google mesmo
Criar o arquivo connect.js

import pg from "pg";

const pool = new pg.Pool({
  host: "localhost",
  port: 5432,
  user: "postgres",
  password: "Limao_10",
  database: "ViveiroLimeira",
});

console.log((await pool.query("SELECT * FROM clientes")).rows);



7 PASSO - CONECTAR O FRONTEND COM BACKEND
Instalar o axios
npm i axios
npm i cors







3 PASSO - CONECTAR O nodejs COM O BANCO pg admin
Criar o código abaixo para conectar o nodejs com banco de dados
Digitar no server.js:

import pg from "pg";

const pool = new pg.Pool({
  host: "localhost",
  port: 5432,
  user: "postgres",
  password: "Limao_10",
  database: "ViveiroLimeira",
});

console.log((await pool.query("SELECT * FROM clientes")).rows);

Rodar o node ./server.js e conferir se deu certo


4 PASSO - CRIAR O ARQUIVO .env PARA DEIXAR OS DADOS DE CONEXÃO SEGUROS
Criar as variáveis de ambiente
São as variáveis que não serão compartilhadas com terceiros

Criar arquivo .env
Colocar no arquivo .env
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=Limao_10
DB_DATABASE=ViveiroLimeira

Digitar no terminal npm install dotenv
npm install dotenv = serve para ter acesso as variáveis de ambiente

Colocar na server.js = import "dotenv/config"
Versões mais novas não precisam do dotenv, não deu certo. Precisei instalar

Alterar o arquivo server.js
const pool = new pg.Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
});

Rodar o node ./server.js e conferir se deu certo


5 PASSO - CRIAR AS ESTRUTURAS DO CRUD
Criar a pasta crud
Dentro da pasta crud, criar a pasta dbOnLine, colocar as estruturas de acesso ao banco de dados
Essa pasta vai guardar os códigos que fazem comunicação com banco de dados e terá tudo que for comunicação com banco de dados

Criar o arquivo de acesso ao banco de dados
Criar o arquivo db.js na pasta dbOnLine

Recortar do server.js e colar no db.js

import pg from "pg";

const pool = new pg.Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
});

export default pool

No arquivo server.js colar
import pool from "../crud/dbOnLine/db.js";


6 PASSO - CRIAR A API
Conectar o Express ao Banco de dados
No arquivo server.js colar o código abaixo:
import express from "express";

const PORTA = 3000;
const server = express();

server.listen(PORTA, () => {
  console.log(`API está online, na porta ${PORTA}!!!`);
});


7 PASSO - CRIAR A ROTA GET QUE IRÁ COMUNICAR O DB COM SERVIDOR
app.get("/", async (req, res) => {
  const result = (await pool.query("SELECT * FROM clientes")).rows;
  res.status(200).send(result);
});

Rodar o comando dev = npm run dev


8 PASSO
Dentro da pasta dbOnLine, criar um arquivo DbClass.js
As iniciais em maiúsculo, porque iremos criar uma classe nesse arquivo
Esse arquivo terá as ações comuns para o banco de dados

Colocar no arquivo DbClass.js o código abaixo:
import pool from "./db.js";

class DbClass {
  async getAll(table) {
    const results = (await pool.query(`SELECT * FROM ${table}`)).rows;
    return results;
  }
}

export default DbClass;

Alterar o código no server:
// CRIAR A ROTA GET QUE IRÁ COMUNICAR O DB COM SERVIDOR
app.get("/clientes", async (req, res) => {
  const result = await new DbClass().getAll("clientes");
  res.status(200).send(result);
});

console.log((await pool.query("SELECT * FROM clientes")).rows);

Rodar o node ./server.js e conferir se deu certo

Deletar do server.js o código 
import pool from "../crud/dbOnLine/db.js"


9 PASSO - CRIAR O ARQUIVO DE ROTAS
Criar a pasta rotas e arquivo rotasUsuarios.js
Vamos criar a rota dos usuários

import { Router } from "express";
import DbClass from "../dbOnLine/DbClass.js";

const rotas = Router();

rotas.get("/", async (req, res) => {
  const result = await new DbClass().getAll("clientes");
  res.status(200).send(result);
});

export default rotas;

O arquivo server.js, fica assim:
import "dotenv/config";
import express from "express";
import cors from "cors";
// import path from "path";
// import { fileURLToPath } from "url";

import rotasClientes from "../crud/rotas/rotasClientes.js";
import rotasCarrinho from "../crud/rotas/rotasCarrinho.js";
import rotasMudas from "../crud/rotas/rotasMudas.js";
import rotasPedidos from "../crud/rotas/rotasPedidos.js";
import rotasEntregas from "../crud/rotas/rotasEntregas.js";

const server = express();
const PORT = 3000;

server.use(cors());
server.use(express.json());

server.use("/carrinho", rotasCarrinho);
server.use("/clientes", rotasClientes);
server.use("/mudas", rotasMudas);
server.use("/pedidos", rotasPedidos);
server.use("/entregas", rotasEntregas);

server.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});


10 PASSO - CRIAR A PASTA FRONTEND e BACKEND
Ir para ela: cd .\back-end\
Digitar no terminal
npm init -y


11 PASSO - CONSTRUIR A API
Instalar o express, cors, pg dotenv no back-end
dotenv = serve para ter acesso as variáveis de ambiente
Digitar no terminal
npm i express cors pg dotenv

Criar a pasta apiBack em backend
Criar o arquivo server.js em apiBack
Colocar no package.json, abaixo de description:
 "type": "module",


import express from "express";

const app = express();
const PORT = 3000;

app.listen(PORT, () => {
  console.log(`Servidor está escutando na porta ${PORT}`);
});

Executar o arquivo server.json
node .\apiBack\server.js
Mas sempre que alterar o código, tem que matar o servidor e reiniciar novamente
Para não ter que fazer isso tem que colocar watch no package.json



"scripts": {
    "start": "node --watch ./apiBack/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

nodemon é mai robusto que watch
rodar no terminal
npm install --save-dev nodemon


12 PASSO - COLOCAR AS MENSAGENS DE ERRO
Digite no terminal e na pasta gloebal
npm install toastify-js





13 PACKAGE.JSON global
Criar o arquivo vite.config.js no fron-end, com o código abaixo:
import { defineConfig } from "vite";

export default defineConfig({
  build: {
    target: "esnext", // para onde os arquivos serão exportados
  },
});
Vai criar o arquivo a pasta dist com arquivo index.html e a pasta assets e arquivo js, css e png
Tudo que vamos quere vai está na pasta dist e não src

Na pasta global
Digite no terminal
npm init -y

Alterar o script do package.json global:

"name": "deploy",
Passar o name para deploy, isso é extremamente importante!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 "scripts": {
    "build": "npm install --prefix back-end && npm install --prefix front-end && npm run build --prefix front-end",
    "start": "npm run start --prefix back-end"
  },

Essas alterações é para instalar o node_modules no front e back e rodar o vite quando rodar o projeto

Alterar o script do package.json do back-end:
  "scripts": {
    "start": "node ./apiBack/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

Alterar o script do package.json do front-end:
No package.json do front-end dele está assim:
 "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },


Digite no terminal:
npm run build
npm run start

14 ALTERAR ENDPOINT
É necessário para não confundir com aquivos.js que terão o mesmo nome do endpoint
Ex:

const BASE_URL = "http://localhost:3000/api/carrinho";

server.use("/api/carrinho", rotasCarrinho);
server.use("/api/clientes", rotasClientes);
server.use("/api/mudas", rotasMudas);
server.use("/api/pedidos", rotasPedidos);
server.use("/api/entregas", rotasEntregas);

Na pasta fron-end criar um arquivo .env
NODE_ENV=development

Não entendi muito bem, mas se está em desenvolvimento vai fazer uma coisa, caso contrário usa outro endereço
No front-end, digite no terminal:
npm i dotenv

Depois colocar em todos os arquivos da apiFront, na verdade que dependem disso const BASE_URL = "http://localhost:3000/api/carrinho";
import "dotenv/config";

const NODE_ENV = process.env.NODE_ENV;


15 PASSO - CÓDIGO PARA MANDAR PAR INDEX.HTML
Ir para pasta back-end, digite no terminal
npm i path

Na pasta back-end criar o arquivo test.js
import path, { dirname } from "path";

const __dirname = path.resolve();
console.log(__dirname);

E roda node ./test.js
Vai dá a pasta que está executando: C:\Users\Daniel\Documents\Software\VIVEIRO_Limeira_2025_06\back-end>

Depois colocar o arquivo test.js dentro de api e rodar: node .\api\test.js
Vai dá a pasta que está executando: C:\Users\Daniel\Documents\Software\VIVEIRO_Limeira_2025_06\back-end>

Pode recortar o conteúdo do arquivo test.js e colar no arquivo server.js
import "dotenv/config";
import express from "express";
import cors from "cors";
import rotasClientes from "../crud/rotas/rotasClientes.js";
import rotasCarrinho from "../crud/rotas/rotasCarrinho.js";
import rotasMudas from "../crud/rotas/rotasMudas.js";
import rotasPedidos from "../crud/rotas/rotasPedidos.js";
import rotasEntregas from "../crud/rotas/rotasEntregas.js";

import path from "path";

const __dirname = path.resolve();

// const __filename = fileURLToPath(import.meta.url);
// const __dirname = path.dirname(__filename);
// console.log("__dirname", __dirname);

const server = express();
export const PORT = 3000;

server.use(cors());
server.use(express.json());

server.use("/api/carrinho", rotasCarrinho);
server.use("/api/clientes", rotasClientes);
server.use("/api/mudas", rotasMudas);
server.use("/api/pedidos", rotasPedidos);
server.use("/api/entregas", rotasEntregas);

server.use(express.static(path.join(__dirname, "../../front-end/dist")));

server.get("*any", (req, res) => {
  res.sendFile(path.join(__dirname, "../../front-end/dist/index.html"));
});

server.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});

Ir para pasta global
Agora rodar npm run build, precisa estar na pasta mãe
Agora rodar npm run start, precisa estar na pasta mãe

Rodar git add . , precisa estar na pasta mãe
Rodar git commit -m "" . , precisa estar na pasta mãe
Rodar git push . , precisa estar na pasta mãe


16 PASSO -RENDER
Clique em deploy web service
Em Build Command: npm run build
Em Start Command: npm run start
Selecionar free
Clicar em deploy web service






Cadastrar o banco de dados no Render
Vá em dashboard
Em new, clique e postgres

Coloque o nome do banco de dados
Clicar em Free
Deixar os outros campos como estão
Clicar em database
Vá em dashboard
Clicar no banco e dados
Clicar em connect
Copiar o caminho
postgresql://viveirolimeira_user:HH73wLSYoxZAbyROuUhSF85Cy80ZdMQ8@dpg-d10r7qq4d50c73b3o320-a/viveirolimeira
Vá em dashboard
Clique no projeto
Crie uma variável de ambiente
Key: DATABASE_URL                        Valor: postgresql://viveirolimeira_user:HH73wLSYoxZAbyROuUhSF85Cy80ZdMQ8@dpg-d10r7qq4d50c73b3o320-a/viveirolimeira
Clique em salvar
No arquivo connect do backend, cole o código abaixo:
import pkg from 'pg';
const { Pool } = pkg;
import dotenv from 'dotenv';

dotenv.config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false,
  },
});

export default pool;




No deploy,
Colocar
Build Command npm run build
Start Command npm run start
Environment Variables não colocar nada

























6 PASSO - CONEXÃO COM BANCO DE DADOS
Entrar no mongoDB para pegar o banco de dados de música, pode logar com google mesmo
Criar o arquivo connect.js

7 PASSO - CONECTAR O FRONTEND COM BACKEND
Instalar o axios
npm i axios
npm i cors


8 PASSO - GITHUBE e DEPLOY


